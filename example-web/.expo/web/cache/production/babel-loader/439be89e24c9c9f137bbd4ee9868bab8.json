{"ast":null,"code":"import _regeneratorRuntime from\"@babel/runtime/regenerator\";import _slicedToArray from\"@babel/runtime/helpers/slicedToArray\";import{useState,useEffect}from'react';export function useOnMount(asyncGetter,initialResult){var _useState=useState({loading:true,result:initialResult}),_useState2=_slicedToArray(_useState,2),response=_useState2[0],setResponse=_useState2[1];useEffect(function(){var getAsync=function getAsync(){var result;return _regeneratorRuntime.async(function getAsync$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.next=2;return _regeneratorRuntime.awrap(asyncGetter());case 2:result=_context.sent;setResponse({loading:false,result:result});case 4:case\"end\":return _context.stop();}}});};getAsync();},[asyncGetter]);return response;}","map":{"version":3,"sources":["asyncHookWrappers.ts"],"names":["response","setResponse","useState","loading","result","useEffect","getAsync","asyncGetter"],"mappings":"6HAAA,OAAA,QAAA,CAAA,SAAA,KAAA,OAAA,CASA,MAAO,SAAA,CAAA,UAAA,CAAA,WAAA,CAAA,aAAA,CAA4F,CAAA,GAAA,CAAA,SAAA,CACjEE,QAAQ,CAAqB,CAC3DC,OAAO,CADoD,IAAA,CAE3DC,MAAM,CAHyF,aACpC,CAArB,CADyD,CAAA,UAAA,CAAA,cAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAC1FJ,QAD0F,CAAA,UAAA,CAAA,CAAA,CAAA,CAChFC,WADgF,CAAA,UAAA,CAAA,CAAA,CAAA,CAMjGI,SAAS,CAAC,UAAM,CAEd,GAAMC,CAAAA,QAAQ,CAARA,QAAAA,CAAAA,QAAAA,EAAW,CAAA,GAAA,CAAA,MAAA,CAAA,MAAA,CAAA,mBAAA,CAAA,KAAA,CAAA,QAAA,CAAA,SAAA,CAAA,QAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,OAAA,QAAA,CAAA,IAAA,CAAA,QAAA,CAAA,IAAA,EAAA,IAAA,EAAA,CAAA,QAAA,CAAA,IAAA,CAAA,CAAA,CAAA,MAAA,CAAA,mBAAA,CAAA,KAAA,CACMC,WADN,EAAA,CAAA,CAAA,IAAA,EAAA,CACTH,MADS,CAAA,QAAA,CAAA,IACTA,CACNH,WAAW,CAAC,CAAEE,OAAO,CAAT,KAAA,CAAkBC,MAAM,CAApCH,MAAY,CAAD,CAAXA,CAFe,IAAA,EAAA,CAAA,IAAA,KAAA,CAAA,MAAA,CAAA,QAAA,CAAA,IAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAjB,CAAA,CAKAK,QAAQ,GAPD,CAAA,CAQN,CARHD,WAQG,CARM,CAATA,CAUA,MAAA,CAAA,QAAA,CACD","sourcesContent":["import { useState, useEffect } from 'react';\n\nimport { AsyncHookResult } from './types';\n\n/**\n * simple hook wrapper for async functions for 'on-mount / componentDidMount' that only need to fired once\n * @param asyncGetter async function that 'gets' something\n * @param initialResult -1 | false | 'unknown'\n */\nexport function useOnMount<T>(asyncGetter: () => Promise<T>, initialResult: T): AsyncHookResult<T> {\n  const [response, setResponse] = useState<AsyncHookResult<T>>({\n    loading: true,\n    result: initialResult,\n  });\n\n  useEffect(() => {\n    // async function cuz react complains if useEffect's effect param is an async function\n    const getAsync = async () => {\n      const result = await asyncGetter();\n      setResponse({ loading: false, result });\n    };\n\n    getAsync();\n  }, [asyncGetter]);\n\n  return response;\n}\n"]},"metadata":{},"sourceType":"module"}